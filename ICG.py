# Form implementation generated from reading ui file 'ICGapp.ui'
#
# Created by: PyQt6 UI code generator 6.3.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import pandas as pd
import numpy as np
import scipy.signal as ss
from PyQt6 import QtCore, QtWidgets, QtGui
from PyQt6.QtWidgets import QFileDialog
from PyQt6.QtCore import QCoreApplication
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(900, 601)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        #buttons
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(30, 60, 121, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(30, 110, 121, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        #input
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 250, 121, 21))
        self.input1 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.input1.setGeometry(QtCore.QRect(30, 275, 121, 31))
        self.input1.setObjectName("input1")
        self.input1.decimals()
        self.input1.setSingleStep(0.01)
        self.input1.setMaximum(0.99)
        self.input1.setMinimum(0)
        #input end
        #radio buttons
        self.radioButton_1 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_1.setGeometry(QtCore.QRect(30, 160, 121, 41))
        self.radioButton_1.setObjectName("radioButton_1")
        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(30, 210, 121, 41))
        self.radioButton_2.setObjectName("radioButton_2")
        #radio buttons end
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(30, 310, 121, 41))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(30, 0, 121, 41))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(150, 0, 121, 41))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(270, 0, 121, 41))
        self.pushButton_9.setObjectName("pushButton_9")
        #buttons end
        #graphic view start
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(160, 60, 721, 421))
        self.graphicsView.setObjectName("graphicsView")
        self.scene = QtWidgets.QGraphicsScene()
        self.graphicsView.setStyleSheet("""
            background-color: 'lightgray';
            border-radius: 5px;
        """)
        self.graphicsView.setScene(self.scene)
        # graphic view end
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(640, 490, 121, 41))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(760, 490, 121, 41))


        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def insertData(self):
        filename = QFileDialog.getOpenFileName()
        path = filename[0]
        self.path = path
        data = pd.read_csv(path)
        imp = data["IMP"]
        icg = np.gradient(imp)
        figure = Figure()
        axes = figure.gca()
        x = list(np.arange(0, len(icg)))
        y = np.array(icg)
        axes.plot(x, y, "-k", label="icg")
        axes.legend()
        axes.grid(True, color='red', linewidth='0.5', alpha=0.5)

        canvas = FigureCanvas(figure)
        canvas.resize(3000, 400)
        self.scene.addWidget(canvas)

    def rawData(self):
        data = pd.read_csv(self.path)
        imp = data["IMP"]
        icg = np.gradient(imp)
        figure = Figure()
        axes = figure.gca()
        x = list(np.arange(0, len(icg)))
        y = np.array(icg)
        axes.plot(x, y, "-k", label="icg")
        axes.legend()
        axes.grid(True, color='red', linewidth='0.5', alpha=0.5)

        canvas = FigureCanvas(figure)
        canvas.resize(3000, 400)
        self.scene.addWidget(canvas)

    def displayPlot(self):
        nq = self.input1.text()
        nq = float(nq.replace(',', '.'))
        if self.radioButton_1.isChecked():
            self.loadFile(self.path, 'lowpass', nq)
        elif self.radioButton_2.isChecked():
            self.loadFile(self.path, 'highpass', nq)

    def loadFile(self, name, passType, nq):
        data = pd.read_csv(f'{name}')
        imp = data["IMP"]
        imp = np.gradient(imp)
        b, a = ss.butter(3, nq, passType)
        icg = ss.filtfilt(b, a, imp)
        data["IMP"] = icg
        self.data = data
        figure = Figure()
        axes = figure.gca()
        x = list(np.arange(0, len(icg)))
        y = np.array(icg)
        axes.plot(x, y, "-k", label="icg")
        axes.legend()

        axes.grid(True, color='red', linewidth='0.5', alpha=0.5, which='major')

        canvas = FigureCanvas(figure)
        canvas.resize(3000, 400)
        self.scene.addWidget(canvas)

    def csvSave(self):
        filename = 'afterPostProc' + self.path[-8:-4] + '.csv'
        headerList = ['ECG', 'IMP', 'Z0']
        self.data.to_csv(filename, header=headerList, index=False)

    def retranslateUi(self, MainWindow):
        self.data = []
        self.path = ''
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ICG app"))
        self.pushButton.setText(_translate("MainWindow", "Wprowadz dane"))
        self.pushButton.clicked.connect(self.insertData)
        self.pushButton_2.setText(_translate("MainWindow", "Wejsciowy sygnal"))
        self.pushButton_2.clicked.connect(self.rawData)
        self.radioButton_1.setText(_translate("MainWindow", "low-pass"))
        self.radioButton_2.setText(_translate("MainWindow", "high-pass"))
        self.label.setText(_translate("MainWindow", "Nyquist frequency:"))
        self.pushButton_10.setText(_translate("MainWindow", "wyswietl wynik"))
        self.pushButton_10.clicked.connect(self.displayPlot)
        self.pushButton_6.setText(_translate("MainWindow", "Zapisz wynik"))
        self.pushButton_6.clicked.connect(self.csvSave)
        self.pushButton_7.setText(_translate("MainWindow", "Krew"))
        self.pushButton_8.setText(_translate("MainWindow", "EKG"))
        self.pushButton_9.setText(_translate("MainWindow", "ICG"))
        self.pushButton_11.clicked.connect(QCoreApplication.instance().quit)
        self.pushButton_11.setText(_translate("MainWindow", "Koniec"))
        self.graphicsView.show()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    app.setStyleSheet("""
        QWidget {
            background-color: white;
        }
        QPushButton {
            border-radius: 5px;
            border: 1px solid gray;
            background-color: white;
            color: black;
            margin-top: 5px;
            margin-right: 5px;
        }
        QDoubleSpinBox {
            border-radius: 5px;
            border: 1px solid gray;
            background-color: white;
            color: black;
        }
    """)
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())